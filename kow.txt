.Implement Asymmetric Key algorithms and key exchange algorithms



algorithms

Diffie-Hellman key exchange:
Step 1: Generate a random private key. This is done by generating a random integer between 1 and p - 1, where p is a prime number.
Step 2: Calculate the public key. This is done by raising the generator g to the power of the private key and taking the remainder modulo p.
Step 3: Exchange public keys with the other party.
Step4: Calculate the shared secret key. This is done by raising the other party's public key to the power of the private key and taking the remainder modulo p.
RSA encryption and decryption:
Step 1: Generate a random RSA key pair. This is done by generating two large prime numbers, p and q, and calculating the public key (n, e) and private key (n, d) using the following formulas:
N = p * q
E = (p - 1)(q - 1) / d
Step 2: Encrypt the message. To encrypt the message, raise it to the power of the public key e and take the remainder modulo n.
Step 3: Decrypt the message. To decrypt the message, raise it to the power of the private key d and take the remainder modulo n


program
Import random
Def diffie_hellman_key_exchange(p, g):
A = random.randint(1, p - 1)
A = g**a % p
B = input("Enter the other party's public key: ")
S = (int(B)**a) % p
Return s
Def rsa_encrypt message, public_key):
N, e = public_key
Ciphertext = message**e % n
Return ciphertext
Def rsa_decrypt(ciphertext, private_key):
N, d = private_key
Plaintext = ciphertext**d % n
Return plaintext
If _name_ == "_main_":
# Diffie-Hellman key exchange
P = 23
G = 5
S = diffie_hellman_key_exchange(p, g)
Print("The shared secret key is:", s)
# RSA encryption and decryption
Message = "This is a secret message." Aim:
To implement asymmetric key algorithms and key exchange algorithms in Python.
9
Public_key = (127, 17)
Private_key = (127, 11)
Ciphertext = rsa_encrypt(message, public_key)
Plaintext = rsa_decrypt(ciphertext, private_key)
Print("The ciphertext is:", ciphertext)
Print("The plaintext is:", plaintext)

Output
The shared secret key is: 13
The ciphertext is: 125
The plaintext is: This is a secret message


#################################################################################


Check message integrity and confidentiality using SSL

Algorithm:

Step 1: Establish an SSL connection between the client and the server.
Step 2: Generate a message digest of the message to be sent.
Step3:Encrypt the message and the message digest using the SSL session key.
Step4:Send the encrypted message and message digest to the server.
Step5:The server decrypts the message and message digest using the SSL session key.
Step6:The server generates a message digest of the decrypted message.
Step7:The server compares the generated message digest to the received message digest.
Step8:If the message digests match, the server knows that the message has not been tampered with and that it is from the correct sender.


program
Import ssl
Import hashlib
Def check_message_integrity_and_confidentiality(client_socket, server_socket, message):
# Generate a message digest of the message.
Message_digest = hashlib.sha256(message.encode()).hexdigest()
# Encrypt the message and message digest using the SSL session key.
Encrypted_message = client_socket.encrypt(message.encode())
Encrypted_message_digest = client_socket.encrypt(message_digest.encode())
# Send the encrypted message and message digest to the server.
Client_socket.sendall(encrypted_message)
Client_socket.sendall(encrypted_message_digest)
# Receive the encrypted message and message digest from the server.
Encrypted_message = server_socket.recvall()
Encrypted_message_digest = server_socket.recvall()
# Decrypt the message and message digest using the SSL session key.
Decrypted_message = server_socket.decrypt(encrypted_message)
Decrypted_message_digest = server_socket.decrypt(encrypted_message_digest)
# Generate a message digest of the decrypted message.
Generated_message_digest = hashlib.sha256(decrypted_message).hexdigest()
# Compare the generated message digest to the received message digest.
If generated_message_digest == decrypted_message_digest:
Return True
Else:
Return False
# Create an SSL client socket.
Client_socket = ssl.create_default_context().wrap_socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM))
Client_socket.connect(('localhost', 8080))
# Create an SSL server socket.
Server_socket = ssl.create_default_context().wrap_socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) To check message integrity and confidentiality using SSL.
15
Server_socket.bind(('localhost', 8080))
Server_socket.listen(1)
# Accept the incoming connection.
Server_socket, _ = server_socket.accept()
# Send a message to the server.
Message = "This is a secret message."
Client_socket.sendall(message.encode())
# Check the message integrity and confidentiality.
If check_message_integrity_and_confidentiality(client_socket, server_socket, message):
Print("The message integrity and confidentiality are valid.")
Else:
Print("The message integrity or confidentiality is not valid.")
# Close the sockets.
Client_socket.close()
Server_socket.close()

Output
The message integrity and confidentiality are valid.






